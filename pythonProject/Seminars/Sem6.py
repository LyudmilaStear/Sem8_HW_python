"""
Задача №39. Решение в группах
Даны два массива чисел. Требуется вывести те элементы
первого массива (в том порядке, в каком они идут в первом
массиве), которых нет во втором массиве. Пользователь вводит
число N - количество элементов в первом массиве, затем N
чисел - элементы массива. Затем число M - количество
элементов во втором массиве. Затем элементы второго массива

Ввод:
7
3 1 3 4 2 4 12

6
4 15 43 1 15 1

Вывод:
3 3 2 12
"""

"""
lst = list(map(int, input('Введите числа через пробел: ').split())) #разбивает строку на элементы(список строк) по пробелу
# map применяет любую функцию  intко всем объектам и возвращает нам тип map.
# поэтому ьы вначале добавляем list, чтобы получить список а не map/
"""

"""lst_1 = [3, 1, 3, 4, 2, 4, 12]
lst_2 = [4, 15, 43, 1, 15, 1]
lst_3 = [el for el in lst_1 if el not in lst_2] #списковое включение. list comprehention
print(lst_3)"""

"""lst_1 = [3, 1, 3, 4, 2, 4, 12]
lst_2 = [4, 15, 43, 1, 15, 1]
lst_3 = list()
for el in lst_1:
    if el not in lst_2:
        lst_3.append(el) #традиционный итератор с функцией append
print(lst_3)"""

"""
Задача №41. Решение в группах
Дан массив, состоящий из целых чисел. Напишите
программу, которая в данном массиве определит
количество элементов, у которых два соседних и, при
этом, оба соседних элемента меньше данного. Сначала
вводится число N — количество элементов в массиве
Далее записаны N чисел — элементы массива. Массив
состоит из целых чисел.

Ввод:
1 2 3 4 5
Вывод:
0

Ввод:
1 5 1 5 1
Вывод:
2
(каждое число вводится с новой строки)
"""

"""
def search_el(list_el):
    count = 0
    for i in range(1, len(list_el) - 1):
        count += 1
    return count
list_1 = [1, 6, 3, 6, 5, 7, 4]
print(search_el(list_1))
"""

"""
my_set = set()
for el in range(10):
    my_set.add(el)


my_set = {el for el in range(10)}

my_dict = {}
for el in range(10):
    my_dict[el] = atr(el)

my_dict = {el: str(el) for el in range(10)}

list = [(i,i) for i in range (1,101) if i % 2 == 0]
"""


"""
Задача №43. Решение в группах
Дан список чисел. Посчитайте, сколько в нем пар
элементов, равных друг другу. Считается, что любые
два элемента, равные друг другу образуют одну пару,
которую необходимо посчитать. Вводится список
чисел. Все числа списка находятся на разных
строках.
Ввод:
1 2 3 2 3
Вывод:
2
"""

"""
lst = [1, 2, 3, 2, 3]

count = 0

for i in lst:
    for j in lst:
        if lst[i] == lst[j]:
            count += 1
        i += 1
print(count)
"""

"""
nums = [1, 2, 3, 2, 3, 3, 3]
my_set = set(nums)
res = []
for el in my_set:
    res.append(nums.count(el) // 2)


print(sum([nums.count(el) // 2 for el in set(nums)])
"""


"""
def find_a_coupe(list_el):
    count = 0
    list_el.sort()
    for el in range(len(list_el) - 1):
        if list_el[el] == list_el[el + 1]:
            count += 1
    return count


list1 = [1, 2, 3, 2, 3]
print(find_a_coupe(list1))
"""
"""
lst = [1, 5, 1, 5, 1]
count = 0
for i in range(1, len(lst) - 1):
    if lst[i - 1] < lst[i] > lst[i + 1]:
        count += 1

print(count)
"""
"""
Задача №45. Решение в группах
Два различных натуральных числа n и m называются
дружественными, если сумма делителей числа n
(включая 1, но исключая само n) равна числу m и
наоборот. Например, 220 и 284 – дружественные числа.
По данному числу k выведите все пары дружественных
чисел, каждое из которых не превосходит k. Программа
получает на вход одно натуральное число k, не
превосходящее 105
. Программа должна вывести все
пары дружественных чисел, каждое из которых не
превосходит k. Пары необходимо выводить по одной в
строке, разделяя пробелами. Каждая пара должна быть
выведена только один раз (перестановка чисел новую
пару не дает).
Ввод:
300
Вывод:
220 284
"""

"""
def sem_divisors(n):
    div_sum = 1
    for i in range(2, n):
        if n % i == 0:
            div_sum += i

    return div_sum

def find_amicable(k):

    div_sum_dict = {}
    for n in range(1, k + 1):
        s_n = sem_divisors(n)
        if s_n in div_sum_dict and div_sum_dict[s_n] == n and n != s_n:
            print(s_n, n)
        div_sum_dict[n] = s_n

find_amicable(10000)
"""


def sum_div(num):
    s = 0
    for el in range(1, num // 2 + 1):
        if num % el == 0:
            s += el
    return s

def func(k):
    res = []
    for i in range(1, k+1):
        if i not in res:
            m = sum_div(i)
            if i == sum_div(m) and m != i:
                res.append(i)
                res.append(m)
    return res
print(func(10000))
